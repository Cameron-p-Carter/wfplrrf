"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { TooltipProvider } from "@/components/ui/tooltip";
import { Edit, Trash2 } from "lucide-react";
import { calculateItemPosition } from "@/lib/utils/timeline";
import type { RequirementWithAllocations, TimelineCallbacks } from "./types";
import type { TimelineConfig } from "@/lib/utils/timeline";
import type { Tables } from "@/types/supabase";
import { PositionSlot } from "./PositionSlot";

interface RequirementBlockProps {
  reqWithAllocs: RequirementWithAllocations;
  blockIndex: number;
  config: TimelineConfig;
  timelineWidth: number;
  allocations: Tables<"project_allocations_detailed">[];
  callbacks: TimelineCallbacks;
}

export function RequirementBlock({ 
  reqWithAllocs, 
  blockIndex, 
  config, 
  timelineWidth,
  allocations,
  callbacks 
}: RequirementBlockProps) {
  const [hoveredRequirement, setHoveredRequirement] = useState<string | null>(null);
  
  const req = reqWithAllocs.requirement;
  const positions = reqWithAllocs.positions;
  const children = reqWithAllocs.children || [];
  const isOrphaned = req.id === 'orphaned';
  const isAutoGenerated = req.auto_generated_type !== null;
  const isIgnored = req.ignored === true;
  const hasChildren = children.length > 0;
  
  const requirementPosition = calculateItemPosition(
    { 
      id: req.id!, 
      title: req.role_type_name!, 
      startDate: new Date(req.start_date!), 
      endDate: new Date(req.end_date!), 
      type: 'requirement' 
    },
    config.startDate,
    config.endDate,
    timelineWidth
  );

  // Calculate heights for parent and children
  const parentBlockHeight = Math.max(80, positions.length * 40 + 30);
  const childrenHeight = hasChildren 
    ? children.reduce((acc, child) => {
        const childHeight = Math.max(60, child.positions.length * 30 + 20);
        return acc + childHeight + 40; // 40px margin between children for better separation
      }, 0) + 32 // Extra spacing after parent
    : 0;
  const totalBlockHeight = parentBlockHeight + childrenHeight;
  const topMargin = blockIndex === 0 ? 20 : 0;

  const handleEditRequirement = (e: React.MouseEvent) => {
    e.stopPropagation();
    callbacks.onEditRequirement?.(req);
  };

  const handleDeleteRequirement = (e: React.MouseEvent) => {
    e.stopPropagation();
    callbacks.onDeleteRequirement?.(req);
  };

  const handleIgnoreRequirement = (e: React.MouseEvent) => {
    e.stopPropagation();
    callbacks.onIgnoreRequirement?.(req);
  };

  const handleUnIgnoreRequirement = (e: React.MouseEvent) => {
    e.stopPropagation();
    callbacks.onUnIgnoreRequirement?.(req);
  };

  // Get auto-generated styling
  const getAutoGeneratedClass = () => {
    if (!isAutoGenerated) return '';
    if (req.auto_generated_type === 'leave_coverage') return 'auto-gen-leave-coverage';
    if (req.auto_generated_type === 'partial_gap') return 'auto-gen-partial-gap';
    return '';
  };

  return (
    <div
      className="relative mb-12"
      style={{ 
        height: `${totalBlockHeight}px`,
        marginTop: `${topMargin}px`,
      }}
    >
      {/* Parent Requirement Background */}
      <div
        className={`absolute border-2 rounded-lg ${
          isOrphaned 
            ? 'bg-red-50 border-red-300' 
            : isIgnored
            ? `bg-gray-50 border-gray-300 opacity-50 ${getAutoGeneratedClass()}`
            : isAutoGenerated
            ? `bg-gray-100 border-gray-400 border-dashed ${getAutoGeneratedClass()}`
            : 'bg-gray-100 border-gray-300'
        }`}
        style={{
          left: `${requirementPosition.left}px`,
          width: `${Math.max(requirementPosition.width, 150)}px`,
          height: `${parentBlockHeight}px`,
        }}
      >
        {/* Requirement Header */}
        <div 
          className={`p-2 border-b rounded-t-lg cursor-pointer transition-colors duration-200 ${
            isOrphaned 
              ? 'border-red-300 bg-red-100' 
              : isIgnored
              ? 'border-gray-300 bg-gray-150 opacity-60'
              : isAutoGenerated
              ? 'border-gray-400 bg-gray-200 hover:bg-gray-300'
              : 'border-gray-300 bg-gray-200 hover:bg-gray-300'
          }`}
          onMouseEnter={() => setHoveredRequirement(req.id!)}
          onMouseLeave={() => setHoveredRequirement(null)}
        >
          <div className="flex flex-col space-y-1">
            <div className="flex items-center justify-between">
              <span className={`text-xs font-medium ${
                isOrphaned ? 'text-red-700' : isIgnored ? 'text-gray-500 line-through' : 'text-gray-700'
              }`}>
                {req.role_type_name} {isOrphaned ? '(No Requirement)' : `(${req.required_count} needed)`}
              </span>
              <div className="flex items-center space-x-1">
                {isOrphaned && (
                  <Badge variant="destructive" className="text-xs">
                    Orphaned
                  </Badge>
                )}
                {isAutoGenerated && !isIgnored && (
                  <Badge variant="secondary" className="text-xs">
                    Auto
                  </Badge>
                )}
                {isIgnored && (
                  <>
                    <Badge variant="secondary" className="text-xs opacity-60">
                      Auto
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      Ignored
                    </Badge>
                  </>
                )}
                {/* Show ignore/unignore buttons for auto-generated requirements when hovered */}
                {!isOrphaned && hoveredRequirement === req.id && isAutoGenerated && !isIgnored && callbacks.onIgnoreRequirement && (
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-4 w-4 p-0 hover:bg-yellow-200"
                    onClick={handleIgnoreRequirement}
                    title="Ignore this auto-generated requirement"
                  >
                    <span className="text-xs">×</span>
                  </Button>
                )}
                {!isOrphaned && hoveredRequirement === req.id && isIgnored && callbacks.onUnIgnoreRequirement && (
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-4 w-4 p-0 hover:bg-green-200"
                    onClick={handleUnIgnoreRequirement}
                    title="Restore this requirement"
                  >
                    <span className="text-xs">↻</span>
                  </Button>
                )}
                {/* Show edit/delete buttons for non-orphaned requirements when hovered */}
                {!isOrphaned && hoveredRequirement === req.id && !req.auto_generated_type && (
                  <>
                    {callbacks.onEditRequirement && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-4 w-4 p-0 hover:bg-blue-200"
                        onClick={handleEditRequirement}
                      >
                        <Edit className="h-3 w-3" />
                      </Button>
                    )}
                    {callbacks.onDeleteRequirement && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-4 w-4 p-0 hover:bg-red-200"
                        onClick={handleDeleteRequirement}
                      >
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    )}
                  </>
                )}
              </div>
            </div>
            <span className={`text-xs ${
              isOrphaned ? 'text-red-500' : 'text-gray-500'
            }`}>
              {req.start_date && req.end_date ? (
                `${new Date(req.start_date).toLocaleDateString('en-AU')} - ${new Date(req.end_date).toLocaleDateString('en-AU')}`
              ) : (
                'Invalid dates'
              )}
            </span>
          </div>
        </div>

        {/* Individual Positions */}
        <div className="p-2 space-y-1">
          <TooltipProvider>
            {positions.map((position, posIndex) => (
              <PositionSlot
                key={position.id}
                position={position}
                positionIndex={posIndex}
                requirementPosition={requirementPosition}
                isOrphaned={isOrphaned}
                allocations={allocations}
                callbacks={callbacks}
              />
            ))}
          </TooltipProvider>
        </div>
      </div>

      {/* Child Requirements */}
      {hasChildren && children.map((child, childIndex) => {
        const childReq = child.requirement;
        const childIsIgnored = childReq.ignored === true;
        const childIsAutoGenerated = childReq.auto_generated_type !== null;
        
        const childPosition = calculateItemPosition(
          { 
            id: childReq.id!, 
            title: childReq.role_type_name!, 
            startDate: new Date(childReq.start_date!), 
            endDate: new Date(childReq.end_date!), 
            type: 'requirement' 
          },
          config.startDate,
          config.endDate,
          timelineWidth
        );

        const childHeight = Math.max(60, child.positions.length * 30 + 20);
        
        // Calculate cumulative position by summing heights of previous children
        let cumulativeChildHeight = 0;
        for (let i = 0; i < childIndex; i++) {
          const prevChildHeight = Math.max(60, children[i].positions.length * 30 + 20);
          cumulativeChildHeight += prevChildHeight + 40; // 40px spacing between children for better separation
        }
        
        const childTopPosition = parentBlockHeight + 32 + cumulativeChildHeight; // 32px margin from parent
        
        // Calculate connector positions
        const parentBottom = parentBlockHeight;
        const childTop = childTopPosition;
        const connectorStart = parentBottom + 8; // Start 8px below parent
        const connectorEnd = childTop;
        const connectorHeight = connectorEnd - connectorStart;
        
        const getChildAutoGeneratedClass = () => {
          if (!childIsAutoGenerated) return '';
          if (childReq.auto_generated_type === 'leave_coverage') return 'auto-gen-leave-coverage';
          if (childReq.auto_generated_type === 'partial_gap') return 'auto-gen-partial-gap';
          return '';
        };

        return (
          <div key={child.id}>
            {/* Horizontal line going LEFT FIRST from parent (only for first child) */}
            {childIndex === 0 && (
              <div
                className="absolute border-t-2 border-gray-400"
                style={{
                  left: `${requirementPosition.left - 40}px`, // Start 40px to the left of parent
                  top: `${connectorStart - 8}px`, // Position higher to connect properly to parent
                  width: `55px`, // 40px + 15px to reach into the parent
                }}
              />
            )}
            
            {/* Main vertical line on the left side connecting all children */}
            {childIndex === 0 && (
              <div
                className="absolute border-l-2 border-gray-400"
                style={{
                  left: `${requirementPosition.left - 40}px`, // 40px to the left of parent
                  top: `${connectorStart - 8}px`, // Start at adjusted parent level (where horizontal line is)
                  height: `${(() => {
                    // Calculate height to reach the last child's horizontal line
                    const lastChildIndex = children.length - 1;
                    let lastChildRelativeTop = 0;
                    for (let i = 0; i < lastChildIndex; i++) {
                      const cHeight = Math.max(60, children[i].positions.length * 30 + 20);
                      lastChildRelativeTop += cHeight + 40; // Height + increased spacing
                    }
                    // Distance from adjusted connectorStart to the last child's horizontal line
                    return 32 + lastChildRelativeTop + 12; // Account for the -8px adjustment on parent line start
                  })()}px`,
                }}
              />
            )}
            
            {/* Horizontal line from left vertical to each child */}
            <div
              className="absolute border-t-2 border-gray-400"
              style={{
                left: `${requirementPosition.left - 40}px`, // Start from left vertical line
                top: `${childTop + 12}px`, // Position to hit middle of child header
                width: `${childPosition.left - (requirementPosition.left - 40)}px`, // Connect to child left edge
              }}
            />
            
            {/* Child Requirement Block */}
            <div
              className={`absolute border-2 rounded-lg ${
                childIsIgnored
                  ? `bg-gray-50 border-gray-300 opacity-50 ${getChildAutoGeneratedClass()}`
                  : childIsAutoGenerated
                  ? `bg-gray-100 border-gray-400 border-dashed ${getChildAutoGeneratedClass()}`
                  : 'bg-gray-100 border-gray-300'
              }`}
              style={{
                left: `${childPosition.left}px`,
                top: `${childTopPosition}px`,
                width: `${Math.max(childPosition.width, 120)}px`,
                height: `${childHeight}px`,
              }}
            >
              {/* Child Header */}
              <div 
                className={`p-2 border-b rounded-t-lg cursor-pointer transition-colors duration-200 ${
                  childIsIgnored
                    ? 'border-gray-300 bg-gray-150 opacity-60'
                    : childIsAutoGenerated
                    ? 'border-gray-400 bg-gray-200 hover:bg-gray-300'
                    : 'border-gray-300 bg-gray-200 hover:bg-gray-300'
                }`}
                onMouseEnter={() => setHoveredRequirement(childReq.id!)}
                onMouseLeave={() => setHoveredRequirement(null)}
              >
                <div className="flex flex-col space-y-1">
                  <div className="flex items-center justify-between">
                    <span className={`text-xs font-medium ${
                      childIsIgnored ? 'text-gray-500 line-through' : 'text-gray-700'
                    }`}>
                      ↳ {childReq.role_type_name} ({childReq.required_count} needed)
                    </span>
                    <div className="flex items-center space-x-1">
                      {childIsAutoGenerated && !childIsIgnored && (
                        <Badge variant="secondary" className="text-xs">
                          Auto
                        </Badge>
                      )}
                      {childIsIgnored && (
                        <>
                          <Badge variant="secondary" className="text-xs opacity-60">
                            Auto
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            Ignored
                          </Badge>
                        </>
                      )}
                      {/* Child action buttons */}
                      {hoveredRequirement === childReq.id && childIsAutoGenerated && !childIsIgnored && callbacks.onIgnoreRequirement && (
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-4 w-4 p-0 hover:bg-yellow-200"
                          onClick={(e) => {
                            e.stopPropagation();
                            callbacks.onIgnoreRequirement?.(childReq);
                          }}
                          title="Ignore this auto-generated requirement"
                        >
                          <span className="text-xs">×</span>
                        </Button>
                      )}
                      {hoveredRequirement === childReq.id && childIsIgnored && callbacks.onUnIgnoreRequirement && (
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-4 w-4 p-0 hover:bg-green-200"
                          onClick={(e) => {
                            e.stopPropagation();
                            callbacks.onUnIgnoreRequirement?.(childReq);
                          }}
                          title="Restore this requirement"
                        >
                          <span className="text-xs">↻</span>
                        </Button>
                      )}
                    </div>
                  </div>
                  <span className="text-xs text-gray-500">
                    {childReq.start_date && childReq.end_date ? (
                      `${new Date(childReq.start_date).toLocaleDateString('en-AU')} - ${new Date(childReq.end_date).toLocaleDateString('en-AU')}`
                    ) : (
                      'Invalid dates'
                    )}
                  </span>
                </div>
              </div>

              {/* Child Positions */}
              <div className="p-2 space-y-1">
                <TooltipProvider>
                  {child.positions.map((position, posIndex) => (
                    <PositionSlot
                      key={position.id}
                      position={position}
                      positionIndex={posIndex}
                      requirementPosition={childPosition}
                      isOrphaned={false}
                      allocations={allocations}
                      callbacks={callbacks}
                    />
                  ))}
                </TooltipProvider>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}