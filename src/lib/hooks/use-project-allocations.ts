"use client";

import { useState, useEffect } from "react";
import { toast } from "sonner";
import { 
  getProjectAllocations, 
  createProjectAllocation, 
  updateProjectAllocation, 
  deleteProjectAllocation,
  getProjectGaps,
  processAllocationAutoGeneration,
  cleanupAutoGeneratedRequirements
} from "@/lib/supabase";
import type { Tables, TablesInsert, TablesUpdate } from "@/types/supabase";

export function useProjectAllocations(projectId: string) {
  const [allocations, setAllocations] = useState<Tables<"project_allocations_detailed">[]>([]);
  const [gaps, setGaps] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchAllocations = async () => {
    if (!projectId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const [allocationsData, gapsData] = await Promise.all([
        getProjectAllocations(projectId),
        getProjectGaps(projectId)
      ]);
      
      setAllocations(allocationsData);
      setGaps(gapsData);
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to fetch project allocations";
      setError(message);
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAllocations();
  }, [projectId]);

  const create = async (allocation: TablesInsert<"project_allocations">) => {
    try {
      await createProjectAllocation(allocation);
      await fetchAllocations(); // Refetch to get updated data
      toast.success("Allocation created successfully");
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to create allocation";
      toast.error(message);
      throw err;
    }
  };

  const update = async (id: string, allocation: TablesUpdate<"project_allocations">) => {
    try {
      await updateProjectAllocation(id, allocation);
      await fetchAllocations(); // Refetch to get updated data
      toast.success("Allocation updated successfully");
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to update allocation";
      toast.error(message);
      throw err;
    }
  };

  const remove = async (id: string) => {
    try {
      await deleteProjectAllocation(id);
      await fetchAllocations(); // Refetch all data to ensure consistency
      toast.success("Allocation deleted successfully");
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to delete allocation";
      toast.error(message);
      throw err;
    }
  };

  return {
    allocations,
    gaps,
    loading,
    error,
    create,
    update,
    remove,
    refetch: fetchAllocations,
  };
}
